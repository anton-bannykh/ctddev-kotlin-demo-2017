diff --git a/app/build.gradle b/app/build.gradle
index 4ec3de3..a857050 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -32,3 +32,9 @@ dependencies {
     androidTestImplementation 'com.android.support.test:runner:1.0.1'
     androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
 }
+
+android {
+    lintOptions {
+        abortOnError false
+    }
+}
diff --git a/app/src/main/java/com/example/demo/MainActivity.kt b/app/src/main/java/com/example/demo/MainActivity.kt
index 67df375..4264c8d 100644
--- a/app/src/main/java/com/example/demo/MainActivity.kt
+++ b/app/src/main/java/com/example/demo/MainActivity.kt
@@ -2,14 +2,49 @@ package com.example.demo
 
 import android.support.v7.app.AppCompatActivity
 import android.os.Bundle
-import my.lib.sumFun
+import android.view.View
+import android.widget.TextView
+import my.lib.matrixPower
 
 class MainActivity : AppCompatActivity() {
 
+    fun solver(v: View) {
+
+        val tVert: TextView = findViewById(R.id.vert)
+        val vers: Int = tVert.text.toString().toInt()
+
+        val tLength: TextView = findViewById(R.id.length)
+        val k = tLength.text.toString().toLong()
+
+        val tForEdges: TextView = findViewById(R.id.forEdges)
+        val listOfEdges = tForEdges.text.toString().split("\u0020", "\u000A").filter { it != "" } //000A
+
+        val g = Array(vers, { IntArray(vers) })
+        val modulo: Int = 115249
+
+        var i: Int = 0
+        while (i < listOfEdges.size) {
+            val fromEdge: Int = listOfEdges[i].toInt() - 1
+            val toEdge: Int = listOfEdges[i + 1].toInt() - 1
+            i += 2
+            g[fromEdge][toEdge] += 1
+        }
+
+        val answer = matrixPower(g, k, modulo)
+
+        var toShow = ""
+        for (line in answer) {
+            toShow += line.joinToString(" ") + "\n"
+        }
+
+        val tNewPlace: TextView = findViewById(R.id.forAnswer)
+        tNewPlace.text = toShow
+    }
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
+
     }
 
-    fun test() = sumFun(1, 2, 3)
 }
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
index 13d35f1..0516a1e 100644
--- a/app/src/main/res/layout/activity_main.xml
+++ b/app/src/main/res/layout/activity_main.xml
@@ -4,17 +4,110 @@
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context="com.example.demo.MainActivity">
+    tools:context="com.example.demo.MainActivity"
+    tools:ignore="ExtraText">
 
-    <TextView
+    <Button
+        android:id="@+id/button"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="@string/greeting"
-        android:textColor="@android:color/holo_red_dark"
-        android:textSize="36sp"
+        android:layout_marginBottom="20dp"
+        android:layout_marginStart="30dp"
+        android:layout_marginTop="50dp"
+        android:gravity="center"
+        android:onClick="solver"
+        android:text="Show Answer"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/length" />
+
+    <EditText
+        android:id="@+id/vert"
+        android:layout_width="130dp"
+        android:layout_height="100dp"
+        android:layout_marginStart="20dp"
+        android:layout_marginTop="30dp"
+        android:ems="10"
+        android:gravity="center"
+        android:hint="@string/vertices"
+        android:inputType="number"
+        android:textSize="30sp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <EditText
+        android:id="@+id/forEdges"
+        android:layout_width="150dp"
+        android:layout_height="150dp"
+        android:layout_marginEnd="20dp"
+        android:layout_marginTop="10dp"
+        android:background="@drawable/rectangle"
+        android:ems="10"
+        android:gravity="center"
+        android:inputType="textMultiLine"
+
+        android:lines="10"
+        android:textSize="30sp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/edgesList" />
+
+    <EditText
+        android:id="@+id/forAnswer"
+        android:layout_width="150dp"
+        android:layout_height="150dp"
+        android:layout_marginBottom="25dp"
+        android:layout_marginEnd="20dp"
+
+        android:layout_marginTop="10dp"
+        android:background="@drawable/rectangle"
+        android:ems="10"
+        android:gravity="center"
+        android:inputType="none"
+        android:lines="10"
+        android:textSize="30sp"
         app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintLeft_toLeftOf="parent"
-        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/wordAnswer" />
+
+    <EditText
+        android:id="@+id/length"
+        android:layout_width="140dp"
+        android:layout_height="100dp"
+        android:layout_marginStart="20dp"
+        android:layout_marginTop="30dp"
+        android:ems="10"
+        android:gravity="center"
+        android:hint="@string/length"
+        android:inputType="number"
+        android:textSize="30sp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/vert" />
+
+    <TextView
+        android:id="@+id/edgesList"
+        android:layout_width="151dp"
+        android:layout_height="45dp"
+        android:layout_marginEnd="20dp"
+        android:layout_marginTop="10dp"
+        android:gravity="center"
+        android:text="Edges' list"
+        android:textSize="30sp"
+        app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
 
+    <TextView
+        android:id="@+id/wordAnswer"
+        android:layout_width="150dp"
+        android:layout_height="45dp"
+        android:layout_marginBottom="10dp"
+        android:layout_marginEnd="20dp"
+        android:layout_marginTop="40dp"
+        android:gravity="center"
+        android:text="Answer"
+        android:textSize="30sp"
+        app:layout_constraintBottom_toTopOf="@+id/forAnswer"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/forEdges" />
+
+
 </android.support.constraint.ConstraintLayout>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 9ac8f1c..148ad8b 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -1,4 +1,5 @@
 <resources>
-    <string name="app_name">Demo</string>
-    <string name="greeting">Wassup!</string>
+    <string name="app_name">PathCounting</string>
+    <string name="vertices">Vertices\nnumber</string>
+    <string name="length">Path\'s\nlength</string>
 </resources>
diff --git a/lib/src/main/kotlin/my/lib/Main.kt b/lib/src/main/kotlin/my/lib/Main.kt
index a1f9a29..d59c506 100644
--- a/lib/src/main/kotlin/my/lib/Main.kt
+++ b/lib/src/main/kotlin/my/lib/Main.kt
@@ -1,17 +1,40 @@
 package my.lib
 
-fun main(args: Array<String>) {
-    println("Hello world!")
+fun matrixIdentity(n: Int): Array<IntArray> {
+    val answer = Array(n, { IntArray(n) })
+    for (i in 0 until n) {
+        answer[i][i] = 1
+    }
+    return answer
 }
 
-fun foo() = 10
+fun matrixProduct(a: Array<IntArray>, b: Array<IntArray>, modulo: Int): Array<IntArray> {
+    if (a[0].size != b.size) {
+        throw IllegalArgumentException("Number of columns in A should be equal to number of rows in B.")
+    }
+    val answer = Array(a.size, { IntArray(b[0].size) })
+    for (i in 0 until a.size) {
+        for (j in 0 until b[0].size) {
+            for (k in 0 until b.size) {
+                answer[i][j] = (answer[i][j] + a[i][k].toLong() * b[k][j]).rem(modulo).toInt()
+            }
+        }
+    }
+    return answer
+}
 
-fun sum(vararg ints: Int): Int {
-    var result = 0
-    for (v in ints) {
-        result += v
+fun matrixPower(g: Array<IntArray>, length: Long, modulo: Int): Array<IntArray> {
+    val n = g.size
+    var answer = matrixIdentity(n)
+    var x = length
+    var matrix = g
+    while (x > 0) {
+        if (x.and(1) == 1L) {
+            answer = matrixProduct(answer, matrix, modulo)
+        }
+        matrix = matrixProduct(matrix, matrix, modulo)
+        x /= 2
     }
-    return result
+    return answer
 }
 
-fun sumFun(vararg ints: Int) = ints.fold(0) { acc, i -> acc + i }
\ No newline at end of file
diff --git a/lib/src/test/kotlin/my/lib/MainTest.kt b/lib/src/test/kotlin/my/lib/MainTest.kt
index 2314ab3..22b5b79 100644
--- a/lib/src/test/kotlin/my/lib/MainTest.kt
+++ b/lib/src/test/kotlin/my/lib/MainTest.kt
@@ -1,41 +1,68 @@
 package my.lib
 
-import org.junit.Assert.assertEquals
+import org.junit.Assert
 import org.junit.Test
 
 class MainTest {
-    @Test
-    fun testFoo() {
-        assertEquals(10, foo())
-    }
 
     @Test
-    fun testSumEmpty() {
-        assertEquals(0, sum())
+    fun testMatrixIdentity() {
+        val n = 5
+        val matrix = matrixIdentity(n)
+        Assert.assertEquals("Size of matrix should be $n", matrix.size, n)
+        for (line in matrix) {
+            Assert.assertEquals("Size of each line should be $n", line.size, n)
+        }
+        for (line in matrix.withIndex()) {
+            for (entry in line.value.withIndex()) {
+                val msg = "Matrix should be identity"
+                if (line.index == entry.index) {
+                    Assert.assertEquals(msg, entry.value, 1)
+                } else {
+                    Assert.assertEquals(msg, entry.value, 0)
+                }
+            }
+        }
     }
 
     @Test
-    fun testSumSingle() {
-        assertEquals(42, sum(42))
+    fun testMatrixProduct1() {
+        val a = Array(1, { intArrayOf(5) })
+        val b = Array(1, { intArrayOf(6) })
+        Assert.assertArrayEquals(matrixProduct(a, b, 19), Array(1, { intArrayOf(11) }))
     }
 
     @Test
-    fun testSumMany() {
-        assertEquals(6, sum(1, 2, 3))
+    fun testMatrixProduct2() {
+        /**
+         * | 1 1 |   | 2 2 |   | 5  5  |
+         * | 2 2 | x | 3 3 | = | 10 10 |
+         */
+        val a = Array(2, { intArrayOf(it + 1, it + 1) })
+        val b = Array(2, { intArrayOf(it + 2, it + 2) })
+        val actual = arrayOf(intArrayOf(5, 5), intArrayOf(10, 10))
+        Assert.assertArrayEquals(matrixProduct(a, b, Int.MAX_VALUE / 3), actual)
     }
 
-    @Test
-    fun testSumFunEmpty() {
-        assertEquals(0, sumFun())
+    @Test(expected = IllegalArgumentException::class)
+    fun testMatrixProduct3() {
+        val a = Array(2, { intArrayOf(1, 2) })
+        val b = Array(1, { intArrayOf(1) })
+        matrixProduct(a, b, 123)
     }
 
     @Test
-    fun testSumFunSingle() {
-        assertEquals(42, sumFun(42))
+    fun testMatrixPower1() {
+        val a = arrayOf(intArrayOf(0, 1, 0), intArrayOf(0, 0, 1), intArrayOf(0, 0, 0))
+        val square = arrayOf(intArrayOf(0, 0, 1), intArrayOf(0, 0, 0), intArrayOf(0, 0, 0))
+        val cube = Array(3, { IntArray(3) })
+        Assert.assertArrayEquals(matrixPower(a, 2, 135), square)
+        Assert.assertArrayEquals(matrixPower(a, 3, 135), cube)
     }
 
     @Test
-    fun testSumFunMany() {
-        assertEquals(6, sumFun(1, 2, 3))
+    fun testMatrixPower2() {
+        val n = 12
+        Assert.assertArrayEquals(matrixPower(matrixIdentity(n), 123, 123), matrixIdentity(n))
     }
 }
\ No newline at end of file
